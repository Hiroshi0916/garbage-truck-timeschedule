{"ast":null,"code":"var _jsxFileName = \"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/AdminPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport GoogleMapDisplay from './GoogleMapDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AdminPage = () => {\n  _s();\n  const [addresses, setAddresses] = useState(JSON.parse(localStorage.getItem('addresses') || '[]'));\n  const [currentAddress, setCurrentAddress] = useState('');\n  const [currentOrder, setCurrentOrder] = useState('');\n  useEffect(() => {\n    // アドレスリストが更新されたらローカルストレージに保存する\n    localStorage.setItem('addresses', JSON.stringify(addresses));\n  }, [addresses]);\n  const addAddress = () => {\n    if (currentAddress.trim() !== '' && currentOrder.trim() !== '') {\n      const order = parseInt(currentOrder);\n      if (!isNaN(order)) {\n        // 既存の順番を更新\n        const updatedAddresses = addresses.map(addr => ({\n          ...addr,\n          order: addr.order >= order ? addr.order + 1 : addr.order\n        }));\n\n        // 新しいアドレス情報を追加\n        updatedAddresses.push({\n          address: currentAddress,\n          // 緯度と経度はAPIから取得\n          order\n        });\n\n        // 順番に従ってソート\n        updatedAddresses.sort((a, b) => a.order - b.order);\n        setAddresses(updatedAddresses);\n        setCurrentAddress('');\n        setCurrentOrder('');\n\n        // ローカルストレージに保存\n        localStorage.setItem('addresses', JSON.stringify(updatedAddresses));\n      }\n    }\n  };\n\n  // 住所リストを表形式で表示する関数\n  const renderAddressTable = () => {\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u767B\\u9332\\u4F4F\\u6240\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u7DEF\\u5EA6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"\\u7D4C\\u5EA6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: addresses.map((address, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: address\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: currentAddress,\n      onChange: e => setCurrentOrder(e.target.value),\n      placeholder: \"\\u9806\\u756A\\u3092\\u5165\\u529B\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addAddress,\n      children: \"\\u4F4F\\u6240\\u3092\\u8FFD\\u52A0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), renderAddressTable(), \" \", /*#__PURE__*/_jsxDEV(GoogleMapDisplay, {\n      addresses: addresses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(AdminPage, \"B1FqBUjtYPF9bwq4nVhvIgxyPeg=\");\n_c = AdminPage;\nexport default AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","useEffect","useState","GoogleMapDisplay","jsxDEV","_jsxDEV","AdminPage","_s","addresses","setAddresses","JSON","parse","localStorage","getItem","currentAddress","setCurrentAddress","currentOrder","setCurrentOrder","setItem","stringify","addAddress","trim","order","parseInt","isNaN","updatedAddresses","map","addr","push","address","sort","a","b","renderAddressTable","children","fileName","_jsxFileName","lineNumber","columnNumber","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/AdminPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport GoogleMapDisplay from './GoogleMapDisplay';\n\ntype AddressInfo = {\n  address: string;\n  latitude?: number;\n  longitude?: number;\n  order: number;\n};\n\nconst AdminPage = () => {\n\n  const [addresses, setAddresses] = useState<AddressInfo[]>(\n      JSON.parse(localStorage.getItem('addresses') || '[]')\n    );\n    const [currentAddress, setCurrentAddress] = useState('');\n    const [currentOrder, setCurrentOrder] = useState('');\n  \n    useEffect(() => {\n      // アドレスリストが更新されたらローカルストレージに保存する\n      localStorage.setItem('addresses', JSON.stringify(addresses));\n    }, [addresses]);\n  \n    \n    const addAddress = () => {\n      if (currentAddress.trim() !== '' && currentOrder.trim() !== '') {\n        const order = parseInt(currentOrder);\n        if (!isNaN(order)) {\n          // 既存の順番を更新\n          const updatedAddresses = addresses.map((addr) => ({\n            ...addr,\n            order: addr.order >= order ? addr.order + 1 : addr.order\n          }));\n  \n          // 新しいアドレス情報を追加\n          updatedAddresses.push({\n            address: currentAddress,\n            // 緯度と経度はAPIから取得\n            order,\n          });\n  \n          // 順番に従ってソート\n          updatedAddresses.sort((a, b) => a.order - b.order);\n  \n          setAddresses(updatedAddresses);\n          setCurrentAddress('');\n          setCurrentOrder('');\n  \n          // ローカルストレージに保存\n          localStorage.setItem('addresses', JSON.stringify(updatedAddresses));\n        }\n      }\n    };\n\n        // 住所リストを表形式で表示する関数\n        const renderAddressTable = () => {\n          return (\n            <table>\n              <thead>\n                <tr>\n                  <th>登録住所</th>\n                  <th>緯度</th>\n                  <th>経度</th>\n                </tr>\n              </thead>\n              <tbody>\n                {addresses.map((address, index) => (\n                  <tr key={index}>\n                    <td>{address}</td>\n                    <td>{/* 緯度データ */}</td>\n                    <td>{/* 経度データ */}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          );\n        };\n\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={currentAddress}\n        onChange={(e) => setCurrentOrder(e.target.value)}\n        placeholder=\"順番を入力\"\n      />\n      <button onClick={addAddress}>住所を追加</button>\n      {renderAddressTable()} {/* この行を追加 */}\n      <GoogleMapDisplay addresses={addresses} />\n    </div>\n  );\n};\n\nexport default AdminPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
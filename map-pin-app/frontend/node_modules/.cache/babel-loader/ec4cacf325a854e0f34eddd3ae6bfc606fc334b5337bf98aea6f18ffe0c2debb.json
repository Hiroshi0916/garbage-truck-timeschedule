{"ast":null,"code":"var _jsxFileName = \"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx\";\n// // App.tsx\n// import React, { useCallback, useState } from \"react\";\n// import { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\n\n// const containerStyle = {\n//   width: \"70%\",\n//   height: \"400px\",\n// };\n\n// const tokyoStationPosition = {\n//   lat: 35.681236,\n//   lng: 139.767125,\n// };\n\n// const defaultPosition = {\n//   lat: 35.6895,\n//   lng: 139.6917,\n// };\n\n// function App() {\n//   const [address, setAddress] = useState(\"\");\n//   const [postalCode, setPostalCode] = useState(\"\");\n//   const [lat, setLat] = useState<number | null>(null);\n//   const [lng, setLng] = useState<number | null>(null);\n\n//   const [position, setPosition] = useState<\n//     { lat: number; lng: number } | undefined\n//   >(defaultPosition);\n\n//   const handleSearch = async () => {\n//     try {\n//         const response = await fetch(`/geocode?address=${address || postalCode}`);\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.status === \"OK\") {\n//             const location = data.results[0].geometry.location;\n//             setPosition({ lat: location.lat, lng: location.lng });\n//             setLat(location.lat);\n//             setLng(location.lng);\n//         } else {\n//             console.error(\"Error fetching coordinates:\", data.status);\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// };\n\n//   // 現在地を取得する関数\n//   const getCurrentLocation = useCallback(async () => {\n//     try {\n//         const response = await fetch('/current-location');\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.location) {\n//             setPosition({ lat: data.location.lat, lng: data.location.lng });\n//             setLat(data.location.lat);\n//             setLng(data.location.lng);\n//         } else {\n//             console.error(\"Error fetching current location\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// }, []);\n\n//   const handleMapLoad = (map: any) => {\n//     console.log(\"Google Map is loaded!\", map);\n//   };\n\n//   const handleMapClick = (e: any) => {\n//     console.log(\"Map clicked at:\", e.latLng.toString());\n//   };\n\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <div style={{ width: \"30%\" }}>\n//         <div>\n//           <label>住所:</label>\n//           <input value={address} onChange={(e) => setAddress(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>郵便番号:</label>\n//           <input\n//             value={postalCode}\n//             onChange={(e) => setPostalCode(e.target.value)}\n//           />\n//         </div>\n//         {/* 現在地を取得するボタンを追加 */}\n//         <button onClick={getCurrentLocation}>現在地を取得</button>\n//         <button onClick={handleSearch}>検索</button>\n//         <div>\n//           緯度: {lat ? lat.toFixed(6) : \"N/A\"}\n//           <br />\n//           経度: {lng ? lng.toFixed(6) : \"N/A\"}\n//         </div>\n//       </div>\n//       <LoadScript\n//         googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\"}\n//       >\n//         <GoogleMap\n//           mapContainerStyle={containerStyle}\n//           center={position}\n//           zoom={13}\n//           onLoad={handleMapLoad} // 地図が読み込まれたときにhandleMapLoadが呼び出される\n//           onClick={handleMapClick} // 地図がクリックされたときにhandleMapClickが呼び出される\n//         >\n//           {/* 東京駅の上にマーカーを配置 */}\n//           <Marker position={tokyoStationPosition} />\n//           {position && <Marker position={position} />}\n//         </GoogleMap>\n//       </LoadScript>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.tsx\nimport React from \"react\";\nimport { GoogleMap, LoadScript } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst defaultPosition = {\n  lat: 35.6895,\n  lng: 139.6917\n};\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\",\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: defaultPosition,\n      zoom: 13\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","GoogleMap","LoadScript","jsxDEV","_jsxDEV","containerStyle","width","height","defaultPosition","lat","lng","App","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","children","mapContainerStyle","center","zoom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx"],"sourcesContent":["// // App.tsx\n// import React, { useCallback, useState } from \"react\";\n// import { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\n\n// const containerStyle = {\n//   width: \"70%\",\n//   height: \"400px\",\n// };\n\n// const tokyoStationPosition = {\n//   lat: 35.681236,\n//   lng: 139.767125,\n// };\n\n// const defaultPosition = {\n//   lat: 35.6895,\n//   lng: 139.6917,\n// };\n\n// function App() {\n//   const [address, setAddress] = useState(\"\");\n//   const [postalCode, setPostalCode] = useState(\"\");\n//   const [lat, setLat] = useState<number | null>(null);\n//   const [lng, setLng] = useState<number | null>(null);\n\n//   const [position, setPosition] = useState<\n//     { lat: number; lng: number } | undefined\n//   >(defaultPosition);\n\n//   const handleSearch = async () => {\n//     try {\n//         const response = await fetch(`/geocode?address=${address || postalCode}`);\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.status === \"OK\") {\n//             const location = data.results[0].geometry.location;\n//             setPosition({ lat: location.lat, lng: location.lng });\n//             setLat(location.lat);\n//             setLng(location.lng);\n//         } else {\n//             console.error(\"Error fetching coordinates:\", data.status);\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// };\n\n//   // 現在地を取得する関数\n//   const getCurrentLocation = useCallback(async () => {\n//     try {\n//         const response = await fetch('/current-location');\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.location) {\n//             setPosition({ lat: data.location.lat, lng: data.location.lng });\n//             setLat(data.location.lat);\n//             setLng(data.location.lng);\n//         } else {\n//             console.error(\"Error fetching current location\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// }, []);\n\n//   const handleMapLoad = (map: any) => {\n//     console.log(\"Google Map is loaded!\", map);\n//   };\n\n//   const handleMapClick = (e: any) => {\n//     console.log(\"Map clicked at:\", e.latLng.toString());\n//   };\n\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <div style={{ width: \"30%\" }}>\n//         <div>\n//           <label>住所:</label>\n//           <input value={address} onChange={(e) => setAddress(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>郵便番号:</label>\n//           <input\n//             value={postalCode}\n//             onChange={(e) => setPostalCode(e.target.value)}\n//           />\n//         </div>\n//         {/* 現在地を取得するボタンを追加 */}\n//         <button onClick={getCurrentLocation}>現在地を取得</button>\n//         <button onClick={handleSearch}>検索</button>\n//         <div>\n//           緯度: {lat ? lat.toFixed(6) : \"N/A\"}\n//           <br />\n//           経度: {lng ? lng.toFixed(6) : \"N/A\"}\n//         </div>\n//       </div>\n//       <LoadScript\n//         googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\"}\n//       >\n//         <GoogleMap\n//           mapContainerStyle={containerStyle}\n//           center={position}\n//           zoom={13}\n//           onLoad={handleMapLoad} // 地図が読み込まれたときにhandleMapLoadが呼び出される\n//           onClick={handleMapClick} // 地図がクリックされたときにhandleMapClickが呼び出される\n//         >\n//           {/* 東京駅の上にマーカーを配置 */}\n//           <Marker position={tokyoStationPosition} />\n//           {position && <Marker position={position} />}\n//         </GoogleMap>\n//       </LoadScript>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// App.tsx\nimport React from \"react\";\nimport { GoogleMap, LoadScript } from \"@react-google-maps/api\";\n\nconst containerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n};\n\nconst defaultPosition = {\n  lat: 35.6895,\n  lng: 139.6917,\n};\n\nfunction App() {\n  return (\n    <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\"}>\n      <GoogleMap\n        mapContainerStyle={containerStyle}\n        center={defaultPosition}\n        zoom={13}\n      >\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\nexport default App;\n\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,UAAU,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,cAAc,GAAG;EACrBC,KAAK,EAAE,OAAO;EACdC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,eAAe,GAAG;EACtBC,GAAG,EAAE,OAAO;EACZC,GAAG,EAAE;AACP,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEP,OAAA,CAACF,UAAU;IAACU,gBAAgB,EAAEC,OAAO,CAACC,GAAG,CAACC,6BAA6B,IAAI,EAAG;IAAAC,QAAA,eAC5EZ,OAAA,CAACH,SAAS;MACRgB,iBAAiB,EAAEZ,cAAe;MAClCa,MAAM,EAAEV,eAAgB;MACxBW,IAAI,EAAE;IAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEjB;AAACC,EAAA,GAXQb,GAAG;AAaZ,eAAeA,GAAG;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
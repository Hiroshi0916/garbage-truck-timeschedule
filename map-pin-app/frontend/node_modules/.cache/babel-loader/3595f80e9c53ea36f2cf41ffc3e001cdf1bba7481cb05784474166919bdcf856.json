{"ast":null,"code":"var _jsxFileName = \"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport { DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst origin = {\n  lat: 42.755955,\n  lng: 141.32816\n};\nconst destination = {\n  lat: 45.299023,\n  lng: 141.65308\n};\nconst transitPoints = [{\n  location: {\n    lat: 43.66406,\n    lng: 142.85445\n  },\n  stopover: true\n}, {\n  location: {\n    lat: 43.906742,\n    lng: 144.79872\n  }\n}, {\n  location: {\n    lat: 43.286533,\n    lng: 143.18524\n  }\n}];\nexport default function Direction() {\n  _s();\n  const [currentDirection, setCurrentDirection] = useState(null);\n  const directionsCallback = useCallback((response, status) => {\n    if (status === google.maps.DirectionsStatus.OK && response) {\n      setCurrentDirection(response);\n    } else {\n      console.error(`Error fetching directions: ${status}`);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DirectionsService, {\n      options: {\n        origin,\n        destination,\n        travelMode: google.maps.TravelMode.DRIVING,\n        optimizeWaypoints: true,\n        waypoints: transitPoints\n      },\n      callback: directionsCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), currentDirection && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n      options: {\n        directions: currentDirection\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Direction, \"gVkXE929zeqzQYFvwf7pwsDYXzs=\");\n_c = Direction;\nvar _c;\n$RefreshReg$(_c, \"Direction\");","map":{"version":3,"names":["React","useState","useCallback","DirectionsService","DirectionsRenderer","jsxDEV","_jsxDEV","Fragment","_Fragment","origin","lat","lng","destination","transitPoints","location","stopover","Direction","_s","currentDirection","setCurrentDirection","directionsCallback","response","status","google","maps","DirectionsStatus","OK","console","error","children","options","travelMode","TravelMode","DRIVING","optimizeWaypoints","waypoints","callback","fileName","_jsxFileName","lineNumber","columnNumber","directions","_c","$RefreshReg$"],"sources":["/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\nimport { DirectionsService, DirectionsRenderer } from '@react-google-maps/api';\n\ninterface Location {\n  lat: number;\n  lng: number;\n}\n\nconst origin: Location = { lat: 42.755955, lng: 141.32816 };\nconst destination: Location = { lat: 45.299023, lng: 141.65308 };\n\nconst transitPoints = [\n  { location: { lat: 43.66406, lng: 142.85445 }, stopover: true },\n  { location: { lat: 43.906742, lng: 144.79872 } },\n  { location: { lat: 43.286533, lng: 143.18524 } },\n];\n\nexport default function Direction() {\n  const [currentDirection, setCurrentDirection] = useState<google.maps.DirectionsResult | null>(null);\n\n  const directionsCallback = useCallback((response: google.maps.DirectionsResult | null, status: google.maps.DirectionsStatus) => {\n    if (status === google.maps.DirectionsStatus.OK && response) {\n      setCurrentDirection(response);\n    } else {\n      console.error(`Error fetching directions: ${status}`);\n    }\n  }, []);\n\n  return (\n    <>\n      <DirectionsService\n        options={{\n          origin,\n          destination,\n          travelMode: google.maps.TravelMode.DRIVING,\n          optimizeWaypoints: true,\n          waypoints: transitPoints,\n        }}\n        callback={directionsCallback}\n      />\n      {currentDirection && (\n        <DirectionsRenderer\n          options={{\n            directions: currentDirection,\n          }}\n        />\n      )}\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,iBAAiB,EAAEC,kBAAkB,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAO/E,MAAMC,MAAgB,GAAG;EAAEC,GAAG,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAU,CAAC;AAC3D,MAAMC,WAAqB,GAAG;EAAEF,GAAG,EAAE,SAAS;EAAEC,GAAG,EAAE;AAAU,CAAC;AAEhE,MAAME,aAAa,GAAG,CACpB;EAAEC,QAAQ,EAAE;IAAEJ,GAAG,EAAE,QAAQ;IAAEC,GAAG,EAAE;EAAU,CAAC;EAAEI,QAAQ,EAAE;AAAK,CAAC,EAC/D;EAAED,QAAQ,EAAE;IAAEJ,GAAG,EAAE,SAAS;IAAEC,GAAG,EAAE;EAAU;AAAE,CAAC,EAChD;EAAEG,QAAQ,EAAE;IAAEJ,GAAG,EAAE,SAAS;IAAEC,GAAG,EAAE;EAAU;AAAE,CAAC,CACjD;AAED,eAAe,SAASK,SAASA,CAAA,EAAG;EAAAC,EAAA;EAClC,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlB,QAAQ,CAAsC,IAAI,CAAC;EAEnG,MAAMmB,kBAAkB,GAAGlB,WAAW,CAAC,CAACmB,QAA6C,EAAEC,MAAoC,KAAK;IAC9H,IAAIA,MAAM,KAAKC,MAAM,CAACC,IAAI,CAACC,gBAAgB,CAACC,EAAE,IAAIL,QAAQ,EAAE;MAC1DF,mBAAmB,CAACE,QAAQ,CAAC;IAC/B,CAAC,MAAM;MACLM,OAAO,CAACC,KAAK,CAAE,8BAA6BN,MAAO,EAAC,CAAC;IACvD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEhB,OAAA,CAAAE,SAAA;IAAAqB,QAAA,gBACEvB,OAAA,CAACH,iBAAiB;MAChB2B,OAAO,EAAE;QACPrB,MAAM;QACNG,WAAW;QACXmB,UAAU,EAAER,MAAM,CAACC,IAAI,CAACQ,UAAU,CAACC,OAAO;QAC1CC,iBAAiB,EAAE,IAAI;QACvBC,SAAS,EAAEtB;MACb,CAAE;MACFuB,QAAQ,EAAEhB;IAAmB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,EACDtB,gBAAgB,iBACfZ,OAAA,CAACF,kBAAkB;MACjB0B,OAAO,EAAE;QACPW,UAAU,EAAEvB;MACd;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACF;EAAA,eACD,CAAC;AAEP;AAACvB,EAAA,CAhCuBD,SAAS;AAAA0B,EAAA,GAAT1B,SAAS;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
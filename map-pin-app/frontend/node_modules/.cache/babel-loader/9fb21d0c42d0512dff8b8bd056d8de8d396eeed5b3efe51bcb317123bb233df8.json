{"ast":null,"code":"var _jsxFileName = \"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\n// // App.tsx\n// import React, { useCallback, useState } from \"react\";\n// import { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\n\n// const containerStyle = {\n//   width: \"70%\",\n//   height: \"400px\",\n// };\n\n// const tokyoStationPosition = {\n//   lat: 35.681236,\n//   lng: 139.767125,\n// };\n\n// const defaultPosition = {\n//   lat: 35.6895,\n//   lng: 139.6917,\n// };\n\n// function App() {\n//   const [address, setAddress] = useState(\"\");\n//   const [postalCode, setPostalCode] = useState(\"\");\n//   const [lat, setLat] = useState<number | null>(null);\n//   const [lng, setLng] = useState<number | null>(null);\n\n//   const [position, setPosition] = useState<\n//     { lat: number; lng: number } | undefined\n//   >(defaultPosition);\n\n//   const handleSearch = async () => {\n//     try {\n//         const response = await fetch(`/geocode?address=${address || postalCode}`);\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.status === \"OK\") {\n//             const location = data.results[0].geometry.location;\n//             setPosition({ lat: location.lat, lng: location.lng });\n//             setLat(location.lat);\n//             setLng(location.lng);\n//         } else {\n//             console.error(\"Error fetching coordinates:\", data.status);\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// };\n\n//   // 現在地を取得する関数\n//   const getCurrentLocation = useCallback(async () => {\n//     try {\n//         const response = await fetch('/current-location');\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.location) {\n//             setPosition({ lat: data.location.lat, lng: data.location.lng });\n//             setLat(data.location.lat);\n//             setLng(data.location.lng);\n//         } else {\n//             console.error(\"Error fetching current location\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// }, []);\n\n//   const handleMapLoad = (map: any) => {\n//     console.log(\"Google Map is loaded!\", map);\n//   };\n\n//   const handleMapClick = (e: any) => {\n//     console.log(\"Map clicked at:\", e.latLng.toString());\n//   };\n\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <div style={{ width: \"30%\" }}>\n//         <div>\n//           <label>住所:</label>\n//           <input value={address} onChange={(e) => setAddress(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>郵便番号:</label>\n//           <input\n//             value={postalCode}\n//             onChange={(e) => setPostalCode(e.target.value)}\n//           />\n//         </div>\n//         {/* 現在地を取得するボタンを追加 */}\n//         <button onClick={getCurrentLocation}>現在地を取得</button>\n//         <button onClick={handleSearch}>検索</button>\n//         <div>\n//           緯度: {lat ? lat.toFixed(6) : \"N/A\"}\n//           <br />\n//           経度: {lng ? lng.toFixed(6) : \"N/A\"}\n//         </div>\n//       </div>\n//       <LoadScript\n//         googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\"}\n//       >\n//         <GoogleMap\n//           mapContainerStyle={containerStyle}\n//           center={position}\n//           zoom={13}\n//           onLoad={handleMapLoad} // 地図が読み込まれたときにhandleMapLoadが呼び出される\n//           onClick={handleMapClick} // 地図がクリックされたときにhandleMapClickが呼び出される\n//         >\n//           {/* 東京駅の上にマーカーを配置 */}\n//           <Marker position={tokyoStationPosition} />\n//           {position && <Marker position={position} />}\n//         </GoogleMap>\n//       </LoadScript>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    async function initMap() {\n      const {\n        Map\n      } = await google.maps.importLibrary(\"maps\");\n      new Map(document.getElementById(\"map\"), {\n        center: {\n          lat: -34.397,\n          lng: 150.644\n        },\n        zoom: 8\n      });\n    }\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"map\",\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 10\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","App","_s","initMap","Map","google","maps","importLibrary","document","getElementById","center","lat","lng","zoom","id","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx"],"sourcesContent":["// // App.tsx\n// import React, { useCallback, useState } from \"react\";\n// import { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\n\n// const containerStyle = {\n//   width: \"70%\",\n//   height: \"400px\",\n// };\n\n// const tokyoStationPosition = {\n//   lat: 35.681236,\n//   lng: 139.767125,\n// };\n\n// const defaultPosition = {\n//   lat: 35.6895,\n//   lng: 139.6917,\n// };\n\n// function App() {\n//   const [address, setAddress] = useState(\"\");\n//   const [postalCode, setPostalCode] = useState(\"\");\n//   const [lat, setLat] = useState<number | null>(null);\n//   const [lng, setLng] = useState<number | null>(null);\n\n//   const [position, setPosition] = useState<\n//     { lat: number; lng: number } | undefined\n//   >(defaultPosition);\n\n//   const handleSearch = async () => {\n//     try {\n//         const response = await fetch(`/geocode?address=${address || postalCode}`);\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.status === \"OK\") {\n//             const location = data.results[0].geometry.location;\n//             setPosition({ lat: location.lat, lng: location.lng });\n//             setLat(location.lat);\n//             setLng(location.lng);\n//         } else {\n//             console.error(\"Error fetching coordinates:\", data.status);\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// };\n\n//   // 現在地を取得する関数\n//   const getCurrentLocation = useCallback(async () => {\n//     try {\n//         const response = await fetch('/current-location');\n\n//         if (!response.ok) {\n//             throw new Error(\"Network response was not ok\");\n//         }\n\n//         const data = await response.json();\n\n//         if (data.location) {\n//             setPosition({ lat: data.location.lat, lng: data.location.lng });\n//             setLat(data.location.lat);\n//             setLng(data.location.lng);\n//         } else {\n//             console.error(\"Error fetching current location\");\n//         }\n//     } catch (error) {\n//         console.error(\"Error:\", error);\n//     }\n// }, []);\n\n//   const handleMapLoad = (map: any) => {\n//     console.log(\"Google Map is loaded!\", map);\n//   };\n\n//   const handleMapClick = (e: any) => {\n//     console.log(\"Map clicked at:\", e.latLng.toString());\n//   };\n\n//   return (\n//     <div style={{ display: \"flex\" }}>\n//       <div style={{ width: \"30%\" }}>\n//         <div>\n//           <label>住所:</label>\n//           <input value={address} onChange={(e) => setAddress(e.target.value)} />\n//         </div>\n//         <div>\n//           <label>郵便番号:</label>\n//           <input\n//             value={postalCode}\n//             onChange={(e) => setPostalCode(e.target.value)}\n//           />\n//         </div>\n//         {/* 現在地を取得するボタンを追加 */}\n//         <button onClick={getCurrentLocation}>現在地を取得</button>\n//         <button onClick={handleSearch}>検索</button>\n//         <div>\n//           緯度: {lat ? lat.toFixed(6) : \"N/A\"}\n//           <br />\n//           経度: {lng ? lng.toFixed(6) : \"N/A\"}\n//         </div>\n//       </div>\n//       <LoadScript\n//         googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY || \"\"}\n//       >\n//         <GoogleMap\n//           mapContainerStyle={containerStyle}\n//           center={position}\n//           zoom={13}\n//           onLoad={handleMapLoad} // 地図が読み込まれたときにhandleMapLoadが呼び出される\n//           onClick={handleMapClick} // 地図がクリックされたときにhandleMapClickが呼び出される\n//         >\n//           {/* 東京駅の上にマーカーを配置 */}\n//           <Marker position={tokyoStationPosition} />\n//           {position && <Marker position={position} />}\n//         </GoogleMap>\n//       </LoadScript>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useEffect } from 'react';\n\ndeclare global {\n  namespace google.maps {\n    function importLibrary(lib: string): Promise<any>;\n  }\n}\n\nconst App: React.FC = () => {\n  useEffect(() => {\n    async function initMap(): Promise<void> {\n      const { Map } = await google.maps.importLibrary(\"maps\");\n      new Map(document.getElementById(\"map\") as HTMLElement, {\n        center: { lat: -34.397, lng: 150.644 },\n        zoom: 8,\n      });\n    }\n\n    initMap();\n  }, []);\n\n  return <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>;\n};\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQzC,MAAMC,GAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1BJ,SAAS,CAAC,MAAM;IACd,eAAeK,OAAOA,CAAA,EAAkB;MACtC,MAAM;QAAEC;MAAI,CAAC,GAAG,MAAMC,MAAM,CAACC,IAAI,CAACC,aAAa,CAAC,MAAM,CAAC;MACvD,IAAIH,GAAG,CAACI,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAiB;QACrDC,MAAM,EAAE;UAAEC,GAAG,EAAE,CAAC,MAAM;UAAEC,GAAG,EAAE;QAAQ,CAAC;QACtCC,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IAEAV,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOH,OAAA;IAAKc,EAAE,EAAC,KAAK;IAACC,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACzE,CAAC;AAACnB,EAAA,CAdID,GAAa;AAAAqB,EAAA,GAAbrB,GAAa;AAgBnB,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport { DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Direction() {\n  _s();\n  const origin = {\n    lat: 35.681236,\n    lng: 139.767125\n  }; // 東京駅\n  const destination = {\n    lat: 35.658581,\n    lng: 139.745433\n  }; // 東京タワー近く（目的地として設定）\n\n  const transitPoints = [{\n    location: {\n      lat: 35.690921,\n      lng: 139.700258\n    },\n    stopover: true\n  },\n  // 新宿駅\n  {\n    location: {\n      lat: 35.699693,\n      lng: 139.70622\n    },\n    stopover: true\n  },\n  // 渋谷駅\n  {\n    location: {\n      lat: 35.713768,\n      lng: 139.777254\n    },\n    stopover: true\n  },\n  // 上野駅\n  {\n    location: {\n      lat: 35.707438,\n      lng: 139.663835\n    },\n    stopover: true\n  },\n  // 品川駅\n  {\n    location: {\n      lat: 35.728926,\n      lng: 139.71038\n    },\n    stopover: true\n  },\n  // 池袋駅\n  {\n    location: {\n      lat: 35.689634,\n      lng: 139.692101\n    },\n    stopover: true\n  },\n  // 新大久保駅\n  {\n    location: {\n      lat: 35.6895,\n      lng: 139.691706\n    },\n    stopover: true\n  },\n  // 大久保駅\n  {\n    location: {\n      lat: 35.699855,\n      lng: 139.77235\n    },\n    stopover: true\n  },\n  // 御徒町駅\n  {\n    location: {\n      lat: 35.698683,\n      lng: 139.773619\n    },\n    stopover: true\n  },\n  // 上野広小路駅\n  {\n    location: {\n      lat: 35.706646,\n      lng: 139.756749\n    },\n    stopover: true\n  } // 御成門駅\n  ];\n\n  const [currentDirection, setCurrentDirection] = useState(null);\n  const directionsCallback = useCallback(response => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        setCurrentDirection(response);\n      } else {\n        console.log(\"Directions request failed due to \" + response.status);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(DirectionsService, {\n      options: {\n        origin,\n        destination,\n        travelMode: \"DRIVING\",\n        waypoints: transitPoints\n      },\n      callback: directionsCallback\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), currentDirection && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n      options: {\n        directions: currentDirection\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(Direction, \"gVkXE929zeqzQYFvwf7pwsDYXzs=\");\n_c = Direction;\nvar _c;\n$RefreshReg$(_c, \"Direction\");","map":{"version":3,"names":["React","useState","useCallback","DirectionsRenderer","DirectionsService","jsxDEV","_jsxDEV","Fragment","_Fragment","Direction","_s","origin","lat","lng","destination","transitPoints","location","stopover","currentDirection","setCurrentDirection","directionsCallback","response","status","console","log","children","options","travelMode","waypoints","callback","fileName","_jsxFileName","lineNumber","columnNumber","directions","_c","$RefreshReg$"],"sources":["/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { DirectionsRenderer, DirectionsService } from \"@react-google-maps/api\";\n\nexport default function Direction() {\n  const origin = { lat: 35.681236, lng: 139.767125 }; // 東京駅\n  const destination = { lat: 35.658581, lng: 139.745433 }; // 東京タワー近く（目的地として設定）\n\n  const transitPoints = [\n    { location: { lat: 35.690921, lng: 139.700258 }, stopover: true }, // 新宿駅\n    { location: { lat: 35.699693, lng: 139.70622 }, stopover: true }, // 渋谷駅\n    { location: { lat: 35.713768, lng: 139.777254 }, stopover: true }, // 上野駅\n    { location: { lat: 35.707438, lng: 139.663835 }, stopover: true }, // 品川駅\n    { location: { lat: 35.728926, lng: 139.71038 }, stopover: true }, // 池袋駅\n    { location: { lat: 35.689634, lng: 139.692101 }, stopover: true }, // 新大久保駅\n    { location: { lat: 35.6895, lng: 139.691706 }, stopover: true }, // 大久保駅\n    { location: { lat: 35.699855, lng: 139.77235 }, stopover: true }, // 御徒町駅\n    { location: { lat: 35.698683, lng: 139.773619 }, stopover: true }, // 上野広小路駅\n    { location: { lat: 35.706646, lng: 139.756749 }, stopover: true }, // 御成門駅\n  ];\n\n  const [currentDirection, setCurrentDirection] = useState(null);\n\n  const directionsCallback = useCallback((response) => {\n    if (response !== null) {\n      if (response.status === \"OK\") {\n        setCurrentDirection(response);\n      } else {\n        console.log(\"Directions request failed due to \" + response.status);\n      }\n    }\n  }, []);\n\n  return (\n    <>\n      <DirectionsService\n        options={{\n          origin,\n          destination,\n          travelMode: \"DRIVING\",\n          waypoints: transitPoints,\n        }}\n        callback={directionsCallback}\n      />\n      {currentDirection && (\n        <DirectionsRenderer\n          options={{\n            directions: currentDirection,\n          }}\n        />\n      )}\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
[{"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/index.tsx":"1","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/reportWebVitals.ts":"2","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx":"3","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/useGoogleMapsAPI.ts":"4","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Navbar.tsx":"5","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/AdminPage.tsx":"6","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/formStyles.ts":"7","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/GoogleMapComponent.tsx":"8","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx":"9","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/SearchForm.tsx":"10"},{"size":343,"mtime":1699616165530,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":1698729870049,"results":"13","hashOfConfig":"12"},{"size":2667,"mtime":1700340507692,"results":"14","hashOfConfig":"12"},{"size":972,"mtime":1698828206600,"results":"15","hashOfConfig":"12"},{"size":893,"mtime":1700295741512,"results":"16","hashOfConfig":"12"},{"size":4421,"mtime":1700297985529,"results":"17","hashOfConfig":"12"},{"size":286,"mtime":1699605824177,"results":"18","hashOfConfig":"12"},{"size":723,"mtime":1700298260065,"results":"19","hashOfConfig":"12"},{"size":2147,"mtime":1700293567982,"results":"20","hashOfConfig":"12"},{"size":1225,"mtime":1700297410616,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"79qk3n",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/index.tsx",[],[],["56"],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/reportWebVitals.ts",[],[],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/App.tsx",[],[],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/useGoogleMapsAPI.ts",[],[],["57"],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Navbar.tsx",[],[],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/AdminPage.tsx",["58","59"],[],"import React, { useEffect, useState } from \"react\";\nimport './AdminPage.css';\nimport axios from 'axios';\nimport { GoogleMap, LoadScript, Polyline } from '@react-google-maps/api';\nimport { AddressInfo } from \"./types\";\n\nconst AdminPage = () => {\n  const [addresses, setAddresses] = useState<AddressInfo[]>(\n    JSON.parse(localStorage.getItem(\"addresses\") || \"[]\")\n  );\n  const [currentAddress, setCurrentAddress] = useState(\"\");\n  const [currentPostalCode, setCurrentPostalCode] = useState(\"\");\n  const [currentOrder] = useState(\"\");\n\n\n\n  useEffect(() => {\n    localStorage.setItem(\"addresses\", JSON.stringify(addresses));\n  }, [addresses]);\n\n  const fetchGeocode = async (address:string, postalCode:string) => {\n    try {\n      const encodedAddress = encodeURIComponent(address);\n      const encodedPostalCode = encodeURIComponent(postalCode);\n      \n      const response = await axios.get(`http://localhost:3001/geocode`, {\n        params: {\n          address: encodedAddress,\n          postalCode: encodedPostalCode\n        }\n      });\n      \n      const location = response.data.results[0].geometry.location;\n\n      console.log(`Latitude: ${location.lat}, Longitude: ${location.lng}`);\n return { latitude: location.lat, longitude: location.lng };\n    } catch (error) {\n      console.error(\"There was an error fetching the geocode:\", error);\n    }\n  };\n  \n  const addAddress = async () => {\n    const order = parseInt(currentOrder);\n    if (currentAddress.trim() !== \"\") {\n            const newId = addresses.length + 1;\n\n      const newOrder = addresses.length > 0 ? addresses[addresses.length - 1].order + 1 : 1;\n  \n      const updatedAddresses = addresses.map((addr) => ({\n        ...addr,\n        order: addr.order >= order ? addr.order + 1 : addr.order,\n      }));\n\n\n      const geoData = await fetchGeocode(currentAddress, currentPostalCode);\n  if (!geoData) {\n    console.error('Failed to fetch geocode data');\n    return;\n  }\n\n\n  // 新しいアドレス情報を追加\n  updatedAddresses.push({\n    id: newId, // 新しいIDを設定\n    address: currentAddress,\n    postalCode: currentPostalCode,\n    latitude: geoData.latitude,\n    longitude: geoData.longitude,\n    order: newOrder,\n  });\n\n    updatedAddresses.sort((a, b) => a.order - b.order);\n      setAddresses(updatedAddresses);\n      setCurrentAddress(\"\");\n      setCurrentPostalCode(\"\");\n\n      localStorage.setItem(\"addresses\", JSON.stringify(updatedAddresses));\n    }\n    fetchGeocode(currentAddress, currentPostalCode);\n  };\n\n  const removeAddress = (orderToRemove: number) => {\n  \n    const updatedAddresses = addresses\n      .filter((addr) => addr.order !== orderToRemove)\n      .map((addr) => ({\n        ...addr,\n        order: addr.order > orderToRemove ? addr.order - 1 : addr.order,\n      }));\n\n    setAddresses(updatedAddresses);\n\n    localStorage.setItem(\"addresses\", JSON.stringify(updatedAddresses));\n  };\n\n  const renderAddressTable = () => {\n    return (\n      <div className=\"table-container\">\n              <table className=\"table\">\n        <thead>\n          <tr>\n            <th>順番</th>\n            <th>郵便番号</th>\n            <th>登録住所</th>\n            <th>緯度</th>\n            <th>経度</th>\n            <th>削除ボタン</th>\n          </tr>\n        </thead>\n        <tbody>\n          {addresses.map((info) => (\n            <tr key={info.order}>\n              <td>{info.order}</td>\n              <td>{info.postalCode || \"未設定\"}</td>\n\n              <td>{info.address}</td>\n              <td>{info.latitude || \"未設定\"}</td>\n              <td>{info.longitude || \"未設定\"}</td>\n              <td>\n                <button onClick={() => removeAddress(info.order)}>削除</button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      </div>\n\n    );\n  };\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={currentPostalCode}\n        onChange={(e) => setCurrentPostalCode(e.target.value)}\n        placeholder=\"郵便番号を入力\"\n      />\n      <input\n        type=\"text\"\n        value={currentAddress}\n        onChange={(e) => setCurrentAddress(e.target.value)}\n        placeholder=\"住所を入力\"\n      />\n      <button onClick={addAddress}>住所を追加</button>\n\n      {renderAddressTable()}\n      <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY!}>\n</LoadScript>\n\n\n    </div>\n  );\n};\n\nexport default AdminPage;\n","/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/formStyles.ts",[],[],["60"],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/GoogleMapComponent.tsx",[],[],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/Direction.tsx",[],[],"/Users/hiroshiobata/dev/garbage-truck-timeschedule/map-pin-app/frontend/src/SearchForm.tsx",[],[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"61","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":4,"column":10,"nodeType":"66","messageId":"67","endLine":4,"endColumn":19},{"ruleId":"64","severity":1,"message":"68","line":4,"column":33,"nodeType":"66","messageId":"67","endLine":4,"endColumn":41},{"ruleId":"61","replacedBy":"69"},"no-new-object",["70"],["70"],"@typescript-eslint/no-unused-vars","'GoogleMap' is defined but never used.","Identifier","unusedVar","'Polyline' is defined but never used.",["70"],"no-object-constructor"]